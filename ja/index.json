[{"content":"dfd\n","permalink":"https://keanteng.github.io/home/ja/docs/2025/testing/","summary":"testing。","title":"testing"},{"content":" 画像: Unsplashより\n特定の場所に行きたいときに、その場所がわからないと本当にイライラしますよね。同様に、PDFフォームの正しい場所にテキストを入力したり、請求書に画像を適切に配置したりするためだけに、コードを数回再実行しなければならない場合、PDFの座標がわからないのは非常に煩わしいことです。\nPDF-Lib というツールを使って請求書生成アプリを作成していたとき、まさにそう感じました。というのも、PDFドキュメント上の目的の場所にテキストを適切に配置するためだけに、コードを何度も再実行する必要があったからです。\nオンラインで情報を調べてみました。「PDF 座標 ビューア」、「PDF ドキュメント 座標 取得方法」など、多くのキーワードで検索しましたが、見つかった解決策は、単にPDFの座標を表示するためだけにソフトウェアのインストールや購入を求めるものばかりでした。2024年にもなって、この機能を提供するウェブサイトがないことに驚きました！とにかく、自分で解決策を見つけ出す必要がありました。\nこの問題を解決するには、PDFの座標系が少し異なる動作をすることを理解する必要があります。たとえば、画像をデカルト平面（直交座標系）に配置すると考えると、その画像の原点は左上隅になります。しかし、PDFの場合は左下隅が原点です。この情報は、正しいPDF座標を得るために変換を行う必要があり、画面上のカーソル座標をそのまま使用することはできないため、非常に重要です。\n変換は次のように行うことができます：\npdf_x = (canvas_x / canvas_width) * page_width pdf_y = (canvas_height - canvas_y) / canvas_height * page_height 基本的に、この式はキャンバス上の座標（たとえば画面上のカーソル座標）を正規化し、キャンバスの高さまたは幅に沿った小数での位置を表します。もちろん、この式はキャンバスとPDFドキュメントの原点の違いも考慮します。次に、これらの値を実際のPDFの高さと幅に合わせてスケーリングします。\nPythonプログラム この式を使えば、Pythonプログラムを作成できます。このプログラムは、画面上でカーソルを追跡できるようにするものです。画面には対象のPDFドキュメントを表示する必要があり、画面をクリックすると、変換されたカーソル座標がPDF座標として表示されます：\nPDFドキュメントを扱うために PyMuPDF ライブラリを使用します。次のようにインストールする必要があります：\npy -m pip install PyMuPDF tk プログラムは以下の通りです：\nimport fitz # PyMuPDF import tkinter as tk from PIL import Image, ImageTk # キャンバス上のマウス位置を取得する関数 def on_click(event): canvas_x, canvas_y = event.x, event.y print(f\u0026#34;キャンバス上のカーソル位置: ({canvas_x}, {canvas_y})\u0026#34;) # キャンバス座標をPDF座標にマッピング pdf_x = (canvas_x / canvas_width) * page_width pdf_y = ( (canvas_height - canvas_y) / canvas_height * page_height ) # Y軸の反転を調整 print(f\u0026#34;マッピングされたPDF座標: ({pdf_x}, {pdf_y})\u0026#34;) # PDFをロードして最初のページを取得、エラーがあれば表示 try: pdf_path = \u0026#34;sample.pdf\u0026#34; # 対象のPDFファイルパス document = fitz.open(pdf_path) page = document.load_page(0) # 最初のページを読み込む except Exception as e: print(f\u0026#34;PDFの読み込みエラー: {e}\u0026#34;) exit() # エラーがあれば終了するなどの処理を追加すると良い #pdf_path = input(\u0026#34;PDFファイルのパスを入力してください: \u0026#34;) # ユーザーに入力を促す場合 # 再度開く必要がある場合 (エラーハンドリングによる) # document = fitz.open(pdf_path) # page = document.load_page(0) # ページを画像にレンダリング pix = page.get_pixmap() img = Image.frombytes(\u0026#34;RGB\u0026#34;, [pix.width, pix.height], pix.samples) # tkinterウィンドウを作成 root = tk.Tk() root.title(\u0026#34;PDFビューア\u0026#34;) # 画像をtkinterが使用できる形式に変換 tk_img = ImageTk.PhotoImage(img) # キャンバスを作成し、画像を追加 canvas = tk.Canvas(root, width=pix.width, height=pix.height) canvas.pack() canvas.create_image(0, 0, anchor=tk.NW, image=tk_img) # マウスクリックイベントをon_click関数にバインド canvas.bind(\u0026#34;\u0026lt;Button-1\u0026gt;\u0026#34;, on_click) # キャンバスの寸法を取得（画像寸法と同じ） canvas_width, canvas_height = pix.width, pix.height # PDFページの寸法を取得 page_width = page.rect.width page_height = page.rect.height print(f\u0026#34;PDFページ寸法: {page_width}x{page_height}\u0026#34;) # tkinterメインループを開始 root.mainloop() Github へのリンク\n","permalink":"https://keanteng.github.io/home/ja/docs/2024/2024-08-08-pdf-coordinate-viewer/","summary":"行きたい場所の正確な位置がわからないとイライラしますよね。それと同じように、PDFフォームの正しい位置にテキストを挿入したり、請求書に画像を適切に配置したりするために、PDFの座標がわからずコードを何度も再実行しなければならないのも、非常に煩わしいものです。","title":"ライブPDF座標ビューア"},{"content":" Unsplashからの画像\nこの記事で提供される情報は教育目的のみであり、ガチャゲームプロバイダーとは一切関連がありません。\nガチャゲームは、ルートボックスに似たガチャメカニズムを導入したビデオゲームで、プレイヤーがゲーム内通貨を使ってランダムなゲーム内アイテムを入手するよう誘惑します。このようなメカニズムは2010年代初頭、特に日本で広く使われるようになり、時間とともにモバイルゲーム文化の不可欠な一部となりました。人気のあるガチャゲームには、原神、Arknights、エピックセブン、崩壊：スターレイルなどがあります。これらのゲームは、優れたアート、音楽、ストーリー、そしてロト形式のシステムによるゲーム内アイテム収集を特徴としており、世界中でますます人気が高まっています。\n崩壊：スターレイル\nはじめに ガチャゲームは基本的に世界中のユーザーが無料でプレイできます。しかし、ガチャメカニズムにより、ゲーム内でレアまたは強力なアイテムを入手することは、非常に低い確率で難しいことが多いです。さらに、限られたゲーム内通貨は、プレイヤーがガチャを通じてランダムなゲーム内アイテムと交換する際に急速に枯渇します。ゲームの高額さは、ゲーム内通貨の価格設定に起因しており、プレイヤーはガチャシステムの低い確率性のために、実際のお金を多額費やしてジャックポットを狙う機会を得る必要があります。\nガチャゲームは基本的に無料でプレイできるものの、収益性の高いビジネスです。このメカニズムは、ゲーム内で標準バナーと期間限定バナーとして実装されることが一般的で、標準バナーではプレイヤーが「引く」ことができる永続的に利用可能なアイテムが特徴です。一方、期間限定バナーは、特定の期間内にのみ入手可能な賞品のみを含みます。\nガチャゲームの収益\n崩壊：スターレイルを例に挙げると、このゲームは標準および期間限定キャラクターバナーを備えており、プレイヤーは各バナーから**0.6%**の確率で5つ星キャラクターを、5.1%の確率で4つ星キャラクターまたはライトコーンを獲得できます。良い点は、プレイヤーがバナーで合計90回引くと、5つ星キャラクターが保証されることです。しかし、期間限定キャラクターバナーでは少し異なり、プロモーションの5つ星キャラクターが50%の確率で出現します。もし受け取った5つ星キャラクターがそのキャラクターでなかった場合、次に5つ星を引く際にそのキャラクターが保証されます。\n5つ星を入手する方法は？ バナーで与えられた引く確率以下のランダムな数値が得られれば、5つ星を獲得できます。ランダムな数値は、サーバー上で0から1の間で均等に生成されます。以下は引く確率の計算方法です：\ndef get_rate(warp): # 74回目の引くまで基本確率は同じ if warp \u0026lt; 74: return 0.06 # 73回目の引く以降、90回目まで毎回6%ずつ確率が上昇 elif warp \u0026lt; 90 and warp \u0026gt;= 74: return (warp - 73) * 0.06 + 0.006 else: return 1.00 引くの分布を見つけるのは少し複雑で、幾何分布や再帰的な確率計算が関わります。基本的には、74回未満の引くについては、幾何分布を使用して確率を計算できます：\nprob(X = k) = p * (1 - p)^(k-1) p : 成功の確率 k : 試行回数 73回目の引く以降、90回目（保証）まで引くごとに確率が変化します：\nP(X \u0026lt; 74) = P(X \u0026lt; 73) + (1 - P(X \u0026lt; 73)) * get_rate(74) P(X \u0026lt; 75) = (1 - P(X \u0026lt; 73)) * get_rate_mult(75) * get_rate(75) + P(X \u0026lt; 74) P(X \u0026lt; 76) = (1 - P(X \u0026lt; 73)) * get_rate_mult(76) * get_rate(76) + P(X \u0026lt; 75) + P(X \u0026lt; 74) # 関数 def get_rate_mult(warp): if warp == 75: return 1 - get_rate(74) else: return (1 - get_rate(warp - 1)) * get_rate_mult(warp - 1) 引くの分布を見ると、いくつかの興味深い洞察が得られます：\n最初のプロットは、5つ星の引くの分布を示しており、約70〜80回の引くで5つ星を獲得する可能性が高いことがわかります。74回目の引くあたりで、累積確率曲線が急上昇し、確率の増加を示しています。3番目のプロットも同様です。プロットの作成については、こちらを参照してください。実際、約80回の引くを準備しておけば、少なくとも1つの5つ星を期待できると安全に想定できます。\n期待値の設定 これまでの計算では、ピティやキャラクター保証のケースは考慮していませんでした。実際のシナリオでは、プレイヤーは自分が欲しい5つ星のコピーを入手する確率を知りたいとき、さまざまな条件を持っています。Pythonを使用して何度もシミュレーションを行い、平均を取ることで推定確率を得ることができます。シミュレーションでは、引く回数、アカウントのキャラクター保証の状態、アカウントのピティ量を考慮する必要があります。\ndef calculate_char_probability( warps, character_pity, character_guaranteed, character_copies, num_simulations ): ... ... estimated_probability = successful_simulations / num_simulations return estimated_probability ゲームアカウントの進行状況に基づいて関数にいくつかの入力値を与えると、目標達成の可能性を教えてくれます。もちろん、これによりより効果的に引くことができ、期待値を高め、失望を減らすことができます：\ncalculate_char_probability( warps, character_pity, character_guaranteed, character_copies, num_simulations ) # 戻り値 推定確率: 0.90 完全なコードはこちらを参照してください。\n参考文献 参考になる優れたリソースや動画：\nhttps://github.com/Jose-AE/hsr-warp-calculator https://github.com/sr229/gacha-prng https://www.youtube.com/watch?v=gZGW190E3ok ","permalink":"https://keanteng.github.io/home/ja/docs/2024/2024-04-30-gacha-planning-with-python/","summary":"ガチャゲームは、ルートボックスに似たガチャメカニズムを導入したビデオゲームで、プレイヤーがゲーム内通貨を使ってランダムなゲーム内アイテムを入手するよう誘惑します。","title":"Pythonを使ったガチャ計画"},{"content":" このサイトの設定に使われたコードはどこで確認できますか？ GitHub リポジトリで確認できます 質問を投稿したり、お気に入りリストに追加するなどのインタラクティブな機能はありますか？ Giscusを利用したコメント機能を追加しました。各ブログページの下部でご確認いただけます！ ","permalink":"https://keanteng.github.io/home/ja/faqs/","summary":"\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eこのサイトの設定に使われたコードはどこで確認できますか？\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/keanteng\"\u003eGitHub リポジトリ\u003c/a\u003eで確認できます\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e質問を投稿したり、お気に入りリストに追加するなどのインタラクティブな機能はありますか？\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://giscus.app/\"\u003eGiscus\u003c/a\u003eを利用したコメント機能を追加しました。各ブログページの下部でご確認いただけます！\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","title":"よくある質問"}]