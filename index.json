[{"content":" This article aims to provide a comprehensive overview of how this site is set up and run. All references used are attached at page bottom.\nPre-requisite There are a few things to prepare before your own site can be created, as follows:\nA GitHub account Installed Microsoft Visual Studio Code Installed Git After you create a GitHub account and installing the necessary software, we are ready to begin!\nWebsite Foundations Setup The site that we are going to create will be based on Hugo, an open-source site generators where it provides a framework for us to deploy a site with speed and ease.\nTo build our website, we will need to install Hugo into our local machine. The installation process will be done on Windows Terminal with the support of Go language. Of course, you can also use other language such as chocolatey, scoop and winget.\nAfter installing go, here\u0026rsquo;s how to install Hugo on terminal:\n1 2 go install -tags extended github.com/gohugoio/hugo@latest hugo version # check if you are using the latest version With Hugo installed in our local system, we would like to now create the foundation or framework for our website. Here I encourage you to change your directory first, preferably to \\Desktop so that you can access all your files easily:\n1 2 cd C:\\Users\\Username\\Desktop hugo new site \u0026lt;your_site_name\u0026gt; -f yml Now change your directory again and create a page on your website:\n1 2 cd \u0026lt;your_site_name\u0026gt; hugo new docs/page.md Website Theme Setup With the site foundation ready, we now add a theme or a specific design to our site for better functionality and appearance. You can check out different theme here, but in my case we will proceed with the PaperMode theme.\nHere we will use git to install the website theme:\n1 2 3 git init git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod After that, navigate to GitHub to create an empty repository and head back to terminal where we need to link up our files with the repository created. Since we are using an empty repository, we need to create a first file, usually README.md to avoid causing any error:\n1 2 3 4 5 6 echo \u0026#34;# Test\u0026#34; \u0026gt;\u0026gt; README.md git add README.md git commit -m \u0026#34;Initial commit\u0026#34; git branch -M main git remote add origin https://github.com/YOUR-GIT-NAME/REPOSITORY-NAME.git git push -u origin main If you want to see how your website look like, you can deploy your site locally using Hugo. This is a good practice to check for error and website update before deploy your site publicly. Simply click the link or type 127.0.0.1 on your web browser:\n1 hugo server Website Deployment Workflow Just now your were shown to deploy the site locally, now to do it publicly - meaning on the web, you need the support from GitHub workflow.\nHere we will need to create an additional directory and put in some codes into it:\nmkdir -p .github/workflows After creating this directory, create a file with name deploy.yml in the workflow folder. Then navigate these two files (your can use file explorer) and put in these codes:\nconfig.yml After copying, change the first line baseurl: to the following format \u0026quot;https://YOUR-NAME-ON-GITHUB.github.io/REPOSITORY-NAME/\u0026quot; 1 copy the code from here (https://github.com/adityatelange/hugo-PaperMod/blob/exampleSite/config.yml) deploy.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 name: Publish to GH Pages on: push: branches: - main pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout source uses: actions/checkout@v3 with: submodules: true - name: Checkout destination uses: actions/checkout@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: ref: gh-pages path: built-site - name: Setup Hugo run: | curl -L -o /tmp/hugo.tar.gz \u0026#39;https://github.com/gohugoio/hugo/releases/download/v0.110.0/hugo_extended_0.110.0_linux-amd64.tar.gz\u0026#39; tar -C ${RUNNER_TEMP} -zxvf /tmp/hugo.tar.gz hugo - name: Build run: ${RUNNER_TEMP}/hugo - name: Deploy if: github.ref == \u0026#39;refs/heads/main\u0026#39; run: | cp -R public/* ${GITHUB_WORKSPACE}/built-site/ cd ${GITHUB_WORKSPACE}/built-site git add . git config user.name \u0026#39;keanteng\u0026#39; # change to your username git config user.email \u0026#39;u2004763@siswa.um.edu.my\u0026#39; # change to your email git commit -m \u0026#39;Updated site\u0026#39; git push Before we link up our local files with the repository, you need to create a new branch on your repository called git-pages and you need to change the setting for GitHub actions.\nChange the setting here\nFinal Step For the last part of the website setup, we will link up our local files with the repository created so that we can view our site online:\n1 2 3 4 git status git add . git commit -m \u0026#34;site update\u0026#34; git push Now, just head to GitHub actions and click on pages build and deployment, and click on your website link on the web!\nClick on the link to view your site\nAcknowledgement ✨ I would like to thank Hugo and PaperMode for empowering me with the tool and foundations to build such a beautiful and impressive site. I want to thank dhij for the wonderful tutorial on YouTube for the site set-up, I failed on numerous attempt to set up the site by looking at some blogs on Medium until I look up his video. I am inspired to make this blog as comprehensive as possible so anyone that reads it can follow successfully. Thanks to Abdur Rahman for his own site set-up as well where I can reference to his code on GitHub such as markdown pages set-up. Finally, thanks to Lil\u0026rsquo;Log where I am inspired to kick-start my own site to share my learnings and some codes on her GitHub blog repository like embedding images and equations on pages, otherwise I might still struggle to add caption to all the images attached.\n","permalink":"https://keanteng.github.io/home/docs/2023_04_09-creating-a-website-with-hugo--papermode/","summary":"This article aims to provide a comprehensive overview of how this site is set up and run. All references used are attached at page bottom.\nPre-requisite There are a few things to prepare before your own site can be created, as follows:\nA GitHub account Installed Microsoft Visual Studio Code Installed Git After you create a GitHub account and installing the necessary software, we are ready to begin!\nWebsite Foundations Setup The site that we are going to create will be based on Hugo, an open-source site generators where it provides a framework for us to deploy a site with speed and ease.","title":"Creating a Website With Hugo \u0026 PaperMode"},{"content":" Images from Unsplash\nDisclaimer: This article is for educational purpose only and the author does not suggest any illegal usage of this technology (generative AI). Please be responsible for your generations and creations. Do not use them for any malicious intent or harm in any form and be respectful.\nThere are two ways to use Stable Diffusion — either locally on your own PC or through a cloud computing services such as Google Collab and Kaggle.\nIt has been a frustration for many without a decent GPU and sufficient VRAM. This has caused long computation time and a lot of friction for you to tune your model parameter/ prompt, and worse, you are not even able to load the Stable Diffusion model.\nSources: Stable Diffusion WebUI https://cdn.changelog.com/uploads/news_items/RdAG/large.png?v=63829970528\nI will break this article in 3 parts according to the resources I gathered, and you are free to discover the one that you see fit.\n1. Google Collab — Realistic \u0026amp; Animated Image Generation Terms: google collab, civitai, account\nGoogle Collab offers a decent and fast GPU and long-running hours for any Google users with a Google account. You can check out the YouTube video here by Nolan Aatama where you can learn about some quick installation steps to run Stable Diffusion in your own account. The account provides installation guide on various models such as Dreamshaper and more.\nYou can check out the models offered on Civitai to look for prompt examples and user review of the model as well as other models offered on the platform.\n1 2 3 4 5 6 # prompts example positive: space, rocket, stallite, earth, milky ways, space dust, high res, 8k negative: lowres, bad hands, bad fingers, sketeches, paintings, If you want to check the prompts for any of the generated images you like can use this Stable Diffusion Decomposer to get the details of each generated images.\nStable Diffusion Decomposer\nYou need to create a Civitai account to post your review and submit comment.\nDo note that it takes around 10 minutes to run the code. It took around 20 seconds to generate a 512x1024 pixels image which is decent. For Google Collab, I think there is no computing quota being set and you can run the program for a few hours. But do avoid leaving the tabs idle as Google will reconnect your program which caused you to re-run all the code again.\n2. Kaggle — Animated Image Generation Terms: kaggle, webui, gpu, telegram\nI only manage to find scripts that provide animated image generation on Kaggle, you can look at it here. You just need to copy and run all the codes in the notebook to access the WebUI. Do note that on Kaggle, you only have 30 hours of GPU resources being allocated, so use it wisely and shut down the connection when you are not running the program to conserve the quota allocated to you.\nTurn off GPU if it is not in use\nIf you like animated image and you don’t want to always re-run the scripts to access WebUI, you can also check out this site, a site that host the WebUI for animated image generation. You can get around 100 quotas by signing in daily (which allows you to generate about 90+ images). You also need to acquire the sign-in token with a Telegram account.\nSome of the model offered on the site\n3. Your Own PC Terms: local, google translation, extension, apply and restart\nIf you want to run Stable Diffusion locally, you can have a read on this article on the installation guide. You can use Google Translate for the article as it is in Chinese.\nBasically, this is what you need to do:\nInstallation of Stable Diffusion WebUI Load models, put in models/Stable-diffusion/ files after the installation step above (can get from Civitai website) After opening the local URL, go to the Extensions tab and install https://github.com/civitai/sd_civitai_extension. Go to Installed tab and click Apply and Restarts UI Done! ","permalink":"https://keanteng.github.io/home/docs/2023-02-25-stable-diffusion-webui-with-civitai-loras/","summary":"Images from Unsplash\nDisclaimer: This article is for educational purpose only and the author does not suggest any illegal usage of this technology (generative AI). Please be responsible for your generations and creations. Do not use them for any malicious intent or harm in any form and be respectful.\nThere are two ways to use Stable Diffusion — either locally on your own PC or through a cloud computing services such as Google Collab and Kaggle.","title":"Stable Diffusion WebUI with Civitai LORAs"},{"content":"In this article, I will be showing the process of scraping some listed companies market capitalization in Malaysia data using Google Sheet. We will perform web scraping on the i3 Investor site.\nImages from Unsplash\nGenerate Webpage for Scraping First of all, open a new google sheet and create a table like this:\nCreate a table like this\nInside the table, we have a few companies name and their listed code. Notice that in cell C3, we put a link — this link will serve as a “prefix”. If the stock code is put at the back of the link, it will direct to the webpage of the particular page.\nprefix link: https://klse.i3investor.com/web/stock/overview/ link to webpage: https://klse.i3investor.com/web/stock/overview/1023 Now, we use the concatenate function to append the code to the prefix links for all the companies in the table:\nUse CONCAT() function to create the links\nWeb Scraping in Action Before we start web scraping, we need to learn about this function — IMPORTXML().\n=importxml(\u0026#34;url\u0026#34;, \u0026#34;query\u0026#34;) Notice that we already have all the URLs needed as we have created the links on the table. Now, the missing piece is called “query” — simply means what do we want to know and where can it be found?\nThe query is called the XPath where it is used in web browser, now let’s hope into Maybank stock page and get the XPath query.\nHighlight the market capitalization amount\nAfter clicking inspect, a window will pop out highlighting a code segment. Here, we need to right click and select Copy full XPath.\nClick copy full XPath\nLet’s hope back to Google Sheet, you will be pasting the query as follow:\n=importxml(\u0026#34;url\u0026#34;,\u0026#34;/html/body/div[3]/div/div[2]/div[8]/div[1]/div[2]/div[1]/div[2]/p/strong\u0026#34;) Note: The URL will be the URLs in the Reference column After applying the formula to the Market Cap column, you will manage to scrape all the Market Capitalization data on the sheet — the data will be updated live.\nData will be loaded once your apply the formula\n","permalink":"https://keanteng.github.io/home/docs/2022-11-05-google-sheet-simple-web-scraping/","summary":"In this article, I will be showing the process of scraping some listed companies market capitalization in Malaysia data using Google Sheet. We will perform web scraping on the i3 Investor site.\nImages from Unsplash\nGenerate Webpage for Scraping First of all, open a new google sheet and create a table like this:\nCreate a table like this\nInside the table, we have a few companies name and their listed code.","title":"Google Sheet Simple Web Scraping"}]